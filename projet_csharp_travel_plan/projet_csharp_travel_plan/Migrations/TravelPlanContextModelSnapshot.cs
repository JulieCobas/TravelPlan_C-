// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projet_csharp_travel_plan.Models;

#nullable disable

namespace projet_csharp_travel_plan.Migrations
{
    [DbContext(typeof(TravelPlanContext))]
    partial class TravelPlanContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("AssocieEquipementCategorie", b =>
                {
                    b.Property<int>("IdCatEquipement")
                        .HasColumnType("int")
                        .HasColumnName("ID_CAT_EQUIPEMENT");

                    b.Property<int>("IdLogement")
                        .HasColumnType("int")
                        .HasColumnName("ID_LOGEMENT");

                    b.HasKey("IdCatEquipement", "IdLogement");

                    b.HasIndex("IdLogement");

                    b.ToTable("ASSOCIE_EQUIPEMENT_CATEGORIE", (string)null);
                });

            modelBuilder.Entity("ChambreEquipe", b =>
                {
                    b.Property<int>("IdChambre")
                        .HasColumnType("int")
                        .HasColumnName("ID_CHAMBRE");

                    b.Property<int>("IdEquipChambre")
                        .HasColumnType("int")
                        .HasColumnName("ID_EQUIP_CHAMBRE");

                    b.HasKey("IdChambre", "IdEquipChambre");

                    b.HasIndex("IdEquipChambre");

                    b.ToTable("CHAMBRE_EQUIPE", (string)null);
                });

            modelBuilder.Entity("Choisir", b =>
                {
                    b.Property<int>("IdVoyage")
                        .HasColumnType("int")
                        .HasColumnName("ID_VOYAGE");

                    b.Property<int>("IdPays")
                        .HasColumnType("int")
                        .HasColumnName("ID_PAYS");

                    b.HasKey("IdVoyage", "IdPays");

                    b.HasIndex("IdPays");

                    b.ToTable("CHOISIR", (string)null);
                });

            modelBuilder.Entity("Participe", b =>
                {
                    b.Property<int>("IdInvitee")
                        .HasColumnType("int")
                        .HasColumnName("ID_INVITEE");

                    b.Property<int>("IdReservation")
                        .HasColumnType("int")
                        .HasColumnName("ID_RESERVATION");

                    b.HasKey("IdInvitee", "IdReservation");

                    b.HasIndex("IdReservation");

                    b.ToTable("PARTICIPE", (string)null);
                });

            modelBuilder.Entity("SeRefereActiv", b =>
                {
                    b.Property<int>("IdCategoriePrix")
                        .HasColumnType("int")
                        .HasColumnName("ID_CATEGORIE_PRIX");

                    b.Property<int>("IdPrixActivite")
                        .HasColumnType("int")
                        .HasColumnName("ID_PRIX_ACTIVITE");

                    b.HasKey("IdCategoriePrix", "IdPrixActivite");

                    b.HasIndex("IdPrixActivite");

                    b.ToTable("SE_REFERE_ACTIV", (string)null);
                });

            modelBuilder.Entity("SeRefereLogement", b =>
                {
                    b.Property<int>("IdCategoriePrix")
                        .HasColumnType("int")
                        .HasColumnName("ID_CATEGORIE_PRIX");

                    b.Property<int>("IdLogementPrix")
                        .HasColumnType("int")
                        .HasColumnName("ID_LOGEMENT_PRIX");

                    b.HasKey("IdCategoriePrix", "IdLogementPrix");

                    b.HasIndex("IdLogementPrix");

                    b.ToTable("SE_REFERE_LOGEMENT", (string)null);
                });

            modelBuilder.Entity("SeRefereTransp", b =>
                {
                    b.Property<int>("IdCategoriePrix")
                        .HasColumnType("int")
                        .HasColumnName("ID_CATEGORIE_PRIX");

                    b.Property<int>("IdPrixTransport")
                        .HasColumnType("int")
                        .HasColumnName("ID_PRIX_TRANSPORT");

                    b.HasKey("IdCategoriePrix", "IdPrixTransport");

                    b.HasIndex("IdPrixTransport");

                    b.ToTable("SE_REFERE_TRANSP", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Activite", b =>
                {
                    b.Property<int>("IdActivite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ACTIVITE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdActivite"));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DETAILS");

                    b.Property<TimeOnly?>("HeuresMoyennes")
                        .HasColumnType("time")
                        .HasColumnName("HEURES_MOYENNES");

                    b.Property<int>("IdCatActiv")
                        .HasColumnType("int")
                        .HasColumnName("ID_CAT_ACTIV");

                    b.Property<int>("IdFournisseur")
                        .HasColumnType("int")
                        .HasColumnName("ID_FOURNISSEUR");

                    b.Property<int?>("IdOptionActivite")
                        .HasColumnType("int")
                        .HasColumnName("ID_OPTION_ACTIVITE");

                    b.Property<int>("IdPays")
                        .HasColumnType("int")
                        .HasColumnName("ID_PAYS");

                    b.Property<int>("IdPrixActivite")
                        .HasColumnType("int")
                        .HasColumnName("ID_PRIX_ACTIVITE");

                    b.Property<byte[]>("Img")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("IMG");

                    b.Property<int?>("NbEvaluation")
                        .HasColumnType("int")
                        .HasColumnName("NB_EVALUATION");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("NOM");

                    b.Property<short?>("Note")
                        .HasColumnType("smallint")
                        .HasColumnName("NOTE");

                    b.HasKey("IdActivite");

                    b.HasIndex("IdCatActiv");

                    b.HasIndex("IdFournisseur");

                    b.HasIndex("IdOptionActivite");

                    b.HasIndex("IdPays");

                    b.HasIndex("IdPrixActivite");

                    b.ToTable("ACTIVITE", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.ActiviteCategorie", b =>
                {
                    b.Property<int>("IdCatActiv")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_CAT_ACTIV");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCatActiv"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("NOM");

                    b.HasKey("IdCatActiv");

                    b.ToTable("ACTIVITE_CATEGORIE", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.ActiviteOption", b =>
                {
                    b.Property<int>("IdOptionActivite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_OPTION_ACTIVITE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOptionActivite"));

                    b.Property<bool?>("EquipementInclu")
                        .HasColumnType("bit")
                        .HasColumnName("EQUIPEMENT_INCLU");

                    b.Property<bool?>("GuideAudio")
                        .HasColumnType("bit")
                        .HasColumnName("GUIDE_AUDIO");

                    b.Property<bool?>("VisiteGuidee")
                        .HasColumnType("bit")
                        .HasColumnName("VISITE_GUIDEE");

                    b.HasKey("IdOptionActivite");

                    b.ToTable("ACTIVITE_OPTION", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.ActivitePrix", b =>
                {
                    b.Property<int>("IdPrixActivite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_PRIX_ACTIVITE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPrixActivite"));

                    b.Property<DateOnly>("DateDebutValidite")
                        .HasColumnType("date")
                        .HasColumnName("DATE_DEBUT_VALIDITE");

                    b.Property<DateOnly>("DateFinValidite")
                        .HasColumnType("date")
                        .HasColumnName("DATE_FIN_VALIDITE");

                    b.Property<decimal>("Prix")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("PRIX");

                    b.HasKey("IdPrixActivite");

                    b.ToTable("ACTIVITE_PRIX", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("IdInvitee")
                        .HasColumnType("int")
                        .HasColumnName("ID_INVITEE");

                    b.Property<int?>("IdUtilisateur")
                        .HasColumnType("int")
                        .HasColumnName("ID_UTILISATEUR");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IdInvitee");

                    b.HasIndex("IdUtilisateur");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.CategoriePrix", b =>
                {
                    b.Property<int>("IdCategoriePrix")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_CATEGORIE_PRIX");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategoriePrix"));

                    b.Property<string>("Nom")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("NOM");

                    b.HasKey("IdCategoriePrix");

                    b.ToTable("CATEGORIE_PRIX", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Chambre", b =>
                {
                    b.Property<int>("IdChambre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_CHAMBRE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdChambre"));

                    b.Property<string>("DetailsChambre")
                        .HasColumnType("text")
                        .HasColumnName("DETAILS_CHAMBRE");

                    b.Property<int?>("IdChambreOption")
                        .HasColumnType("int")
                        .HasColumnName("ID_CHAMBRE_OPTION");

                    b.Property<int>("IdLogement")
                        .HasColumnType("int")
                        .HasColumnName("ID_LOGEMENT");

                    b.Property<int>("IdLogementPrix")
                        .HasColumnType("int")
                        .HasColumnName("ID_LOGEMENT_PRIX");

                    b.Property<short>("NbOccupants")
                        .HasColumnType("smallint")
                        .HasColumnName("NB_OCCUPANTS");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("NOM");

                    b.Property<short>("Surface")
                        .HasColumnType("smallint")
                        .HasColumnName("SURFACE");

                    b.Property<string>("TypeDeChambre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("TYPE_DE_CHAMBRE");

                    b.HasKey("IdChambre");

                    b.HasIndex("IdChambreOption");

                    b.HasIndex("IdLogement");

                    b.HasIndex("IdLogementPrix");

                    b.ToTable("CHAMBRE", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.ChambreEquipement", b =>
                {
                    b.Property<int>("IdEquipChambre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_EQUIP_CHAMBRE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEquipChambre"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("NOM");

                    b.HasKey("IdEquipChambre");

                    b.ToTable("CHAMBRE_EQUIPEMENT", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.ChambreOption", b =>
                {
                    b.Property<int>("IdChambreOption")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_CHAMBRE_OPTION");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdChambreOption"));

                    b.Property<bool>("AnnulationGratuite")
                        .HasColumnType("bit")
                        .HasColumnName("ANNULATION_GRATUITE");

                    b.Property<DateOnly?>("DateAnnulationGratuite")
                        .HasColumnType("date")
                        .HasColumnName("DATE_ANNULATION_GRATUITE");

                    b.Property<bool>("PetitDejeunerInclus")
                        .HasColumnType("bit")
                        .HasColumnName("PETIT_DEJEUNER_INCLUS");

                    b.HasKey("IdChambreOption");

                    b.ToTable("CHAMBRE_OPTION", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Client", b =>
                {
                    b.Property<int>("IdUtilisateur")
                        .HasColumnType("int")
                        .HasColumnName("ID_UTILISATEUR");

                    b.Property<string>("Addresse")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ADDRESSE");

                    b.Property<string>("Cp")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CP");

                    b.Property<DateOnly>("DateNaissance")
                        .HasColumnType("date")
                        .HasColumnName("DATE_NAISSANCE");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("MAIL");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("MOT_DE_PASSE");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("NOM");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("PAYS");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("PRENOM");

                    b.Property<string>("Telephone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("TELEPHONE");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("VILLE");

                    b.HasKey("IdUtilisateur");

                    b.ToTable("CLIENT", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.EquipementCategorie", b =>
                {
                    b.Property<int>("IdCatEquipement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_CAT_EQUIPEMENT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCatEquipement"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("NOM");

                    b.HasKey("IdCatEquipement");

                    b.ToTable("EQUIPEMENT_CATEGORIE", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Fournisseur", b =>
                {
                    b.Property<int>("IdFournisseur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_FOURNISSEUR");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFournisseur"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ADRESSE");

                    b.Property<string>("CompteBancaire")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("COMPTE_BANCAIRE");

                    b.Property<string>("Cp")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CP");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("MAIL");

                    b.Property<string>("NomCompagnie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NOM_COMPAGNIE");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("PAYS");

                    b.Property<string>("Telephone")
                        .HasMaxLength(24)
                        .IsUnicode(false)
                        .HasColumnType("varchar(24)")
                        .HasColumnName("TELEPHONE");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("VILLE");

                    b.HasKey("IdFournisseur");

                    b.ToTable("FOURNISSEUR", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Invite", b =>
                {
                    b.Property<int>("IdInvitee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_INVITEE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInvitee"));

                    b.Property<DateOnly>("DateNaissance")
                        .HasColumnType("date")
                        .HasColumnName("DATE_NAISSANCE");

                    b.Property<int>("IdUtilisateur")
                        .HasColumnType("int")
                        .HasColumnName("ID_UTILISATEUR");

                    b.Property<string>("Mail")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("MAIL");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("NOM");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("PRENOM");

                    b.HasKey("IdInvitee");

                    b.ToTable("INVITE", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.LocationLogement", b =>
                {
                    b.Property<int>("IdLogementLoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_LOGEMENT_LOC");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLogementLoc"));

                    b.Property<int>("IdLogementPrix")
                        .HasColumnType("int")
                        .HasColumnName("ID_LOGEMENT_PRIX");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("NOM");

                    b.HasKey("IdLogementLoc");

                    b.HasIndex("IdLogementPrix");

                    b.ToTable("LOCATION_LOGEMENT", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Logement", b =>
                {
                    b.Property<int>("IdLogement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_LOGEMENT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLogement"));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DETAILS");

                    b.Property<int>("IdFournisseur")
                        .HasColumnType("int")
                        .HasColumnName("ID_FOURNISSEUR");

                    b.Property<int>("IdLogementCategorie")
                        .HasColumnType("int")
                        .HasColumnName("ID_LOGEMENT_CATEGORIE");

                    b.Property<int>("IdLogementLoc")
                        .HasColumnType("int")
                        .HasColumnName("ID_LOGEMENT_LOC");

                    b.Property<int>("IdPays")
                        .HasColumnType("int")
                        .HasColumnName("ID_PAYS");

                    b.Property<byte[]>("Img")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("IMG");

                    b.Property<int?>("NbEvaluation")
                        .HasColumnType("int")
                        .HasColumnName("NB_EVALUATION");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NOM");

                    b.Property<short?>("Note")
                        .HasColumnType("smallint")
                        .HasColumnName("NOTE");

                    b.HasKey("IdLogement");

                    b.HasIndex("IdFournisseur");

                    b.HasIndex("IdLogementCategorie");

                    b.HasIndex("IdLogementLoc");

                    b.HasIndex("IdPays");

                    b.ToTable("LOGEMENT", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.LogementCategorie", b =>
                {
                    b.Property<int>("IdLogementCategorie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_LOGEMENT_CATEGORIE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLogementCategorie"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("NOM");

                    b.HasKey("IdLogementCategorie");

                    b.ToTable("LOGEMENT_CATEGORIE", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Paiement", b =>
                {
                    b.Property<int>("IdPaiement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_PAIEMENT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPaiement"));

                    b.Property<short>("Crypto")
                        .HasColumnType("smallint")
                        .HasColumnName("CRYPTO");

                    b.Property<DateOnly>("DateExpiration")
                        .HasColumnType("date")
                        .HasColumnName("DATE_EXPIRATION");

                    b.Property<int>("IdUtilisateur")
                        .HasColumnType("int")
                        .HasColumnName("ID_UTILISATEUR");

                    b.Property<int>("NumeroCarteBancaire")
                        .HasColumnType("int")
                        .HasColumnName("NUMERO_CARTE_BANCAIRE");

                    b.Property<string>("TypeCarteBancaire")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("TYPE_CARTE_BANCAIRE");

                    b.HasKey("IdPaiement");

                    b.HasIndex("IdUtilisateur");

                    b.ToTable("PAIEMENT", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Pay", b =>
                {
                    b.Property<int>("IdPays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_PAYS");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPays"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("NOM");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("REGION");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("VILLE");

                    b.HasKey("IdPays");

                    b.ToTable("PAYS", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.PrixLogement", b =>
                {
                    b.Property<int>("IdLogementPrix")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_LOGEMENT_PRIX");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLogementPrix"));

                    b.Property<DateOnly>("DateDebutValidite")
                        .HasColumnType("date")
                        .HasColumnName("DATE_DEBUT_VALIDITE");

                    b.Property<DateOnly>("DateFinValidite")
                        .HasColumnType("date")
                        .HasColumnName("DATE_FIN_VALIDITE");

                    b.Property<decimal>("Prix")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("PRIX");

                    b.HasKey("IdLogementPrix");

                    b.ToTable("PRIX_LOGEMENT", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Reservation", b =>
                {
                    b.Property<int>("IdReservation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_RESERVATION");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReservation"));

                    b.Property<DateOnly>("DateHeureDebut")
                        .HasColumnType("date")
                        .HasColumnName("DATE_HEURE_DEBUT");

                    b.Property<DateOnly?>("DateHeureFin")
                        .HasColumnType("date")
                        .HasColumnName("DATE_HEURE_FIN");

                    b.Property<int?>("IdActivite")
                        .HasColumnType("int")
                        .HasColumnName("ID_ACTIVITE");

                    b.Property<int?>("IdLogement")
                        .HasColumnType("int")
                        .HasColumnName("ID_LOGEMENT");

                    b.Property<int?>("IdTransport")
                        .HasColumnType("int")
                        .HasColumnName("ID_TRANSPORT");

                    b.Property<int>("IdVoyage")
                        .HasColumnType("int")
                        .HasColumnName("ID_VOYAGE");

                    b.HasKey("IdReservation");

                    b.HasIndex("IdActivite");

                    b.HasIndex("IdLogement");

                    b.HasIndex("IdTransport");

                    b.HasIndex("IdVoyage");

                    b.ToTable("RESERVATION", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Transport", b =>
                {
                    b.Property<int>("IdTransport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_TRANSPORT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTransport"));

                    b.Property<short?>("Classe")
                        .HasColumnType("smallint")
                        .HasColumnName("CLASSE");

                    b.Property<DateTime>("HeureArrivee")
                        .HasColumnType("datetime")
                        .HasColumnName("HEURE_ARRIVEE");

                    b.Property<DateTime>("HeureDepart")
                        .HasColumnType("datetime")
                        .HasColumnName("HEURE_DEPART");

                    b.Property<int>("IdCategorieTransport")
                        .HasColumnType("int")
                        .HasColumnName("ID_CATEGORIE_TRANSPORT");

                    b.Property<int>("IdFournisseur")
                        .HasColumnType("int")
                        .HasColumnName("ID_FOURNISSEUR");

                    b.Property<int?>("IdOptionTransport")
                        .HasColumnType("int")
                        .HasColumnName("ID_OPTION_TRANSPORT");

                    b.Property<int>("IdPays")
                        .HasColumnType("int")
                        .HasColumnName("ID_PAYS");

                    b.Property<int>("IdPrixTransport")
                        .HasColumnType("int")
                        .HasColumnName("ID_PRIX_TRANSPORT");

                    b.Property<int>("IdVehiculeLoc")
                        .HasColumnType("int")
                        .HasColumnName("ID_VEHICULE_LOC");

                    b.Property<string>("LieuDepart")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("LIEU_DEPART");

                    b.HasKey("IdTransport");

                    b.HasIndex("IdCategorieTransport");

                    b.HasIndex("IdFournisseur");

                    b.HasIndex("IdOptionTransport");

                    b.HasIndex("IdPays");

                    b.HasIndex("IdPrixTransport");

                    b.HasIndex("IdVehiculeLoc");

                    b.ToTable("TRANSPORT", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.TransportCategorie", b =>
                {
                    b.Property<int>("IdCategorieTransport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_CATEGORIE_TRANSPORT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategorieTransport"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("NOM");

                    b.HasKey("IdCategorieTransport");

                    b.ToTable("TRANSPORT_CATEGORIE", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.TransportOption", b =>
                {
                    b.Property<int>("IdOptionTransport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_OPTION_TRANSPORT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOptionTransport"));

                    b.Property<bool?>("BagageEnSoute")
                        .HasColumnType("bit")
                        .HasColumnName("BAGAGE_EN_SOUTE");

                    b.Property<bool?>("BagageLarge")
                        .HasColumnType("bit")
                        .HasColumnName("BAGAGE_LARGE");

                    b.Property<bool?>("BagageMain")
                        .HasColumnType("bit")
                        .HasColumnName("BAGAGE_MAIN");

                    b.Property<string>("NumeroSiege")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("NUMERO_SIEGE");

                    b.Property<bool?>("Speedyboarding")
                        .HasColumnType("bit")
                        .HasColumnName("SPEEDYBOARDING");

                    b.HasKey("IdOptionTransport");

                    b.ToTable("TRANSPORT_OPTION", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.TransportPrix", b =>
                {
                    b.Property<int>("IdPrixTransport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_PRIX_TRANSPORT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPrixTransport"));

                    b.Property<DateOnly>("DateDebutValidite")
                        .HasColumnType("date")
                        .HasColumnName("DATE_DEBUT_VALIDITE");

                    b.Property<DateOnly>("DateFinValidite")
                        .HasColumnType("date")
                        .HasColumnName("DATE_FIN_VALIDITE");

                    b.Property<decimal>("Prix")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("PRIX");

                    b.HasKey("IdPrixTransport");

                    b.ToTable("TRANSPORT_PRIX", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.VehiculeLocation", b =>
                {
                    b.Property<int>("IdVehiculeLoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_VEHICULE_LOC");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVehiculeLoc"));

                    b.Property<byte[]>("Img")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("IMG");

                    b.Property<bool>("KillometreIllimite")
                        .HasColumnType("bit")
                        .HasColumnName("KILLOMETRE_ILLIMITE");

                    b.Property<string>("Marque")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("MARQUE");

                    b.Property<short>("NbSiege")
                        .HasColumnType("smallint")
                        .HasColumnName("NB_SIEGE");

                    b.Property<string>("TypeConducteur")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TYPE_CONDUCTEUR");

                    b.Property<string>("TypeVehicule")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("TYPE_VEHICULE");

                    b.HasKey("IdVehiculeLoc");

                    b.ToTable("VEHICULE_LOCATION", (string)null);
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Voyage", b =>
                {
                    b.Property<int>("IdVoyage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_VOYAGE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVoyage"));

                    b.Property<DateOnly>("DateDebut")
                        .HasColumnType("date")
                        .HasColumnName("DATE_DEBUT");

                    b.Property<DateOnly>("DateFin")
                        .HasColumnType("date")
                        .HasColumnName("DATE_FIN");

                    b.Property<int>("IdUtilisateur")
                        .HasColumnType("int")
                        .HasColumnName("ID_UTILISATEUR");

                    b.Property<decimal>("PrixTotal")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("PRIX_TOTAL");

                    b.Property<bool>("StatutPaiement")
                        .HasColumnType("bit")
                        .HasColumnName("STATUT_PAIEMENT");

                    b.HasKey("IdVoyage");

                    b.HasIndex("IdUtilisateur");

                    b.ToTable("VOYAGE", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("projet_csharp_travel_plan.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projet_csharp_travel_plan.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssocieEquipementCategorie", b =>
                {
                    b.HasOne("projet_csharp_travel_plan.Models.EquipementCategorie", null)
                        .WithMany()
                        .HasForeignKey("IdCatEquipement")
                        .IsRequired()
                        .HasConstraintName("FK_ASSOCIE_EQUIPEMENT_CATEGORIE_EQUIPEMENT_CATEGORIE");

                    b.HasOne("projet_csharp_travel_plan.Models.Logement", null)
                        .WithMany()
                        .HasForeignKey("IdLogement")
                        .IsRequired()
                        .HasConstraintName("FK_ASSOCIE_EQUIPEMENT_CATEGORIE_LOGEMENT");
                });

            modelBuilder.Entity("ChambreEquipe", b =>
                {
                    b.HasOne("projet_csharp_travel_plan.Models.Chambre", null)
                        .WithMany()
                        .HasForeignKey("IdChambre")
                        .IsRequired()
                        .HasConstraintName("FK_CHAMBRE_EQUIPE_CHAMBRE");

                    b.HasOne("projet_csharp_travel_plan.Models.ChambreEquipement", null)
                        .WithMany()
                        .HasForeignKey("IdEquipChambre")
                        .IsRequired()
                        .HasConstraintName("FK_CHAMBRE_EQUIPE_CHAMBRE_EQUIPEMENT");
                });

            modelBuilder.Entity("Choisir", b =>
                {
                    b.HasOne("projet_csharp_travel_plan.Models.Pay", null)
                        .WithMany()
                        .HasForeignKey("IdPays")
                        .IsRequired()
                        .HasConstraintName("FK_CHOISIR_PAYS");

                    b.HasOne("projet_csharp_travel_plan.Models.Voyage", null)
                        .WithMany()
                        .HasForeignKey("IdVoyage")
                        .IsRequired()
                        .HasConstraintName("FK_CHOISIR_VOYAGE");
                });

            modelBuilder.Entity("Participe", b =>
                {
                    b.HasOne("projet_csharp_travel_plan.Models.Invite", null)
                        .WithMany()
                        .HasForeignKey("IdInvitee")
                        .IsRequired()
                        .HasConstraintName("FK_PARTICIPE_INVITE");

                    b.HasOne("projet_csharp_travel_plan.Models.Reservation", null)
                        .WithMany()
                        .HasForeignKey("IdReservation")
                        .IsRequired()
                        .HasConstraintName("FK_PARTICIPE_RESERVATION");
                });

            modelBuilder.Entity("SeRefereActiv", b =>
                {
                    b.HasOne("projet_csharp_travel_plan.Models.CategoriePrix", null)
                        .WithMany()
                        .HasForeignKey("IdCategoriePrix")
                        .IsRequired()
                        .HasConstraintName("FK_SE_REFERE_ACTIV_CATEGORIE_PRIX");

                    b.HasOne("projet_csharp_travel_plan.Models.ActivitePrix", null)
                        .WithMany()
                        .HasForeignKey("IdPrixActivite")
                        .IsRequired()
                        .HasConstraintName("FK_SE_REFERE_ACTIV_ACTIVITE_PRIX");
                });

            modelBuilder.Entity("SeRefereLogement", b =>
                {
                    b.HasOne("projet_csharp_travel_plan.Models.CategoriePrix", null)
                        .WithMany()
                        .HasForeignKey("IdCategoriePrix")
                        .IsRequired()
                        .HasConstraintName("FK_SE_REFERE_LOGEMENT_CATEGORIE_PRIX");

                    b.HasOne("projet_csharp_travel_plan.Models.PrixLogement", null)
                        .WithMany()
                        .HasForeignKey("IdLogementPrix")
                        .IsRequired()
                        .HasConstraintName("FK_SE_REFERE_LOGEMENT_PRIX_LOGEMENT");
                });

            modelBuilder.Entity("SeRefereTransp", b =>
                {
                    b.HasOne("projet_csharp_travel_plan.Models.CategoriePrix", null)
                        .WithMany()
                        .HasForeignKey("IdCategoriePrix")
                        .IsRequired()
                        .HasConstraintName("FK_SE_REFERE_TRANSP_CATEGORIE_PRIX");

                    b.HasOne("projet_csharp_travel_plan.Models.TransportPrix", null)
                        .WithMany()
                        .HasForeignKey("IdPrixTransport")
                        .IsRequired()
                        .HasConstraintName("FK_SE_REFERE_TRANSP_TRANSPORT_PRIX");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Activite", b =>
                {
                    b.HasOne("projet_csharp_travel_plan.Models.ActiviteCategorie", "IdCatActivNavigation")
                        .WithMany("Activites")
                        .HasForeignKey("IdCatActiv")
                        .IsRequired()
                        .HasConstraintName("FK_ACTIVITE_ACTIVITE_CATEGORIE");

                    b.HasOne("projet_csharp_travel_plan.Models.Fournisseur", "IdFournisseurNavigation")
                        .WithMany("Activites")
                        .HasForeignKey("IdFournisseur")
                        .IsRequired()
                        .HasConstraintName("FK_ACTIVITE_FOURNISSEUR");

                    b.HasOne("projet_csharp_travel_plan.Models.ActiviteOption", "IdOptionActiviteNavigation")
                        .WithMany("Activites")
                        .HasForeignKey("IdOptionActivite")
                        .HasConstraintName("FK_ACTIVITE_ACTIVITE_OPTION");

                    b.HasOne("projet_csharp_travel_plan.Models.Pay", "IdPaysNavigation")
                        .WithMany("Activites")
                        .HasForeignKey("IdPays")
                        .IsRequired()
                        .HasConstraintName("FK_ACTIVITE_PAYS");

                    b.HasOne("projet_csharp_travel_plan.Models.ActivitePrix", "IdPrixActiviteNavigation")
                        .WithMany("Activites")
                        .HasForeignKey("IdPrixActivite")
                        .IsRequired()
                        .HasConstraintName("FK_ACTIVITE_ACTIVITE_PRIX");

                    b.Navigation("IdCatActivNavigation");

                    b.Navigation("IdFournisseurNavigation");

                    b.Navigation("IdOptionActiviteNavigation");

                    b.Navigation("IdPaysNavigation");

                    b.Navigation("IdPrixActiviteNavigation");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("projet_csharp_travel_plan.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.AspNetUser", b =>
                {
                    b.HasOne("projet_csharp_travel_plan.Models.Invite", "IdInviteeNavigation")
                        .WithMany("AspNetUsers")
                        .HasForeignKey("IdInvitee")
                        .HasConstraintName("FK_ASPNETUS_REFERENCE_INVITE");

                    b.HasOne("projet_csharp_travel_plan.Models.Client", "IdUtilisateurNavigation")
                        .WithMany("AspNetUsers")
                        .HasForeignKey("IdUtilisateur")
                        .HasConstraintName("FK_ASPNETUS_REFERENCE_CLIENT");

                    b.Navigation("IdInviteeNavigation");

                    b.Navigation("IdUtilisateurNavigation");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("projet_csharp_travel_plan.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("projet_csharp_travel_plan.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.AspNetUserToken", b =>
                {
                    b.HasOne("projet_csharp_travel_plan.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Chambre", b =>
                {
                    b.HasOne("projet_csharp_travel_plan.Models.ChambreOption", "IdChambreOptionNavigation")
                        .WithMany("Chambres")
                        .HasForeignKey("IdChambreOption")
                        .HasConstraintName("FK_CHAMBRE_CHAMBRE_OPTION");

                    b.HasOne("projet_csharp_travel_plan.Models.Logement", "IdLogementNavigation")
                        .WithMany("Chambres")
                        .HasForeignKey("IdLogement")
                        .IsRequired()
                        .HasConstraintName("FK_CHAMBRE_LOGEMENT");

                    b.HasOne("projet_csharp_travel_plan.Models.PrixLogement", "IdLogementPrixNavigation")
                        .WithMany("Chambres")
                        .HasForeignKey("IdLogementPrix")
                        .IsRequired()
                        .HasConstraintName("FK_CHAMBRE_PRIX_LOGEMENT");

                    b.Navigation("IdChambreOptionNavigation");

                    b.Navigation("IdLogementNavigation");

                    b.Navigation("IdLogementPrixNavigation");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.LocationLogement", b =>
                {
                    b.HasOne("projet_csharp_travel_plan.Models.PrixLogement", "IdLogementPrixNavigation")
                        .WithMany("LocationLogements")
                        .HasForeignKey("IdLogementPrix")
                        .IsRequired()
                        .HasConstraintName("FK_LOCATION_LOGEMENT_PRIX_LOGEMENT");

                    b.Navigation("IdLogementPrixNavigation");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Logement", b =>
                {
                    b.HasOne("projet_csharp_travel_plan.Models.Fournisseur", "IdFournisseurNavigation")
                        .WithMany("Logements")
                        .HasForeignKey("IdFournisseur")
                        .IsRequired()
                        .HasConstraintName("FK_LOGEMENT_FOURNISSEUR");

                    b.HasOne("projet_csharp_travel_plan.Models.LogementCategorie", "IdLogementCategorieNavigation")
                        .WithMany("Logements")
                        .HasForeignKey("IdLogementCategorie")
                        .IsRequired()
                        .HasConstraintName("FK_LOGEMENT_LOGEMENT_CATEGORIE");

                    b.HasOne("projet_csharp_travel_plan.Models.LocationLogement", "IdLogementLocNavigation")
                        .WithMany("Logements")
                        .HasForeignKey("IdLogementLoc")
                        .IsRequired()
                        .HasConstraintName("FK_LOGEMENT_LOCATION_LOGEMENT");

                    b.HasOne("projet_csharp_travel_plan.Models.Pay", "IdPaysNavigation")
                        .WithMany("Logements")
                        .HasForeignKey("IdPays")
                        .IsRequired()
                        .HasConstraintName("FK_LOGEMENT_PAYS");

                    b.Navigation("IdFournisseurNavigation");

                    b.Navigation("IdLogementCategorieNavigation");

                    b.Navigation("IdLogementLocNavigation");

                    b.Navigation("IdPaysNavigation");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Paiement", b =>
                {
                    b.HasOne("projet_csharp_travel_plan.Models.Client", "IdUtilisateurNavigation")
                        .WithMany("Paiements")
                        .HasForeignKey("IdUtilisateur")
                        .IsRequired()
                        .HasConstraintName("FK_PAIEMENT_CLIENT");

                    b.Navigation("IdUtilisateurNavigation");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Reservation", b =>
                {
                    b.HasOne("projet_csharp_travel_plan.Models.Activite", "IdActiviteNavigation")
                        .WithMany("Reservations")
                        .HasForeignKey("IdActivite")
                        .HasConstraintName("FK_RESERVATION_ACTIVITE");

                    b.HasOne("projet_csharp_travel_plan.Models.Logement", "IdLogementNavigation")
                        .WithMany("Reservations")
                        .HasForeignKey("IdLogement")
                        .HasConstraintName("FK_RESERVATION_LOGEMENT");

                    b.HasOne("projet_csharp_travel_plan.Models.Transport", "IdTransportNavigation")
                        .WithMany("Reservations")
                        .HasForeignKey("IdTransport")
                        .HasConstraintName("FK_RESERVATION_TRANSPORT");

                    b.HasOne("projet_csharp_travel_plan.Models.Voyage", "IdVoyageNavigation")
                        .WithMany("Reservations")
                        .HasForeignKey("IdVoyage")
                        .IsRequired()
                        .HasConstraintName("FK_RESERVATION_VOYAGE");

                    b.Navigation("IdActiviteNavigation");

                    b.Navigation("IdLogementNavigation");

                    b.Navigation("IdTransportNavigation");

                    b.Navigation("IdVoyageNavigation");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Transport", b =>
                {
                    b.HasOne("projet_csharp_travel_plan.Models.TransportCategorie", "IdCategorieTransportNavigation")
                        .WithMany("Transports")
                        .HasForeignKey("IdCategorieTransport")
                        .IsRequired()
                        .HasConstraintName("FK_TRANSPORT_TRANSPORT_CATEGORIE");

                    b.HasOne("projet_csharp_travel_plan.Models.Fournisseur", "IdFournisseurNavigation")
                        .WithMany("Transports")
                        .HasForeignKey("IdFournisseur")
                        .IsRequired()
                        .HasConstraintName("FK_TRANSPORT_FOURNISSEUR");

                    b.HasOne("projet_csharp_travel_plan.Models.TransportOption", "IdOptionTransportNavigation")
                        .WithMany("Transports")
                        .HasForeignKey("IdOptionTransport")
                        .HasConstraintName("FK_TRANSPORT_TRANSPORT_OPTION");

                    b.HasOne("projet_csharp_travel_plan.Models.Pay", "IdPaysNavigation")
                        .WithMany("Transports")
                        .HasForeignKey("IdPays")
                        .IsRequired()
                        .HasConstraintName("FK_TRANSPORT_PAYS");

                    b.HasOne("projet_csharp_travel_plan.Models.TransportPrix", "IdPrixTransportNavigation")
                        .WithMany("Transports")
                        .HasForeignKey("IdPrixTransport")
                        .IsRequired()
                        .HasConstraintName("FK_TRANSPORT_TRANSPORT_PRIX");

                    b.HasOne("projet_csharp_travel_plan.Models.VehiculeLocation", "IdVehiculeLocNavigation")
                        .WithMany("Transports")
                        .HasForeignKey("IdVehiculeLoc")
                        .IsRequired()
                        .HasConstraintName("FK_TRANSPORT_VEHICULE_LOCATION");

                    b.Navigation("IdCategorieTransportNavigation");

                    b.Navigation("IdFournisseurNavigation");

                    b.Navigation("IdOptionTransportNavigation");

                    b.Navigation("IdPaysNavigation");

                    b.Navigation("IdPrixTransportNavigation");

                    b.Navigation("IdVehiculeLocNavigation");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Voyage", b =>
                {
                    b.HasOne("projet_csharp_travel_plan.Models.Client", "IdUtilisateurNavigation")
                        .WithMany("Voyages")
                        .HasForeignKey("IdUtilisateur")
                        .IsRequired()
                        .HasConstraintName("FK_VOYAGE_CLIENT");

                    b.Navigation("IdUtilisateurNavigation");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Activite", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.ActiviteCategorie", b =>
                {
                    b.Navigation("Activites");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.ActiviteOption", b =>
                {
                    b.Navigation("Activites");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.ActivitePrix", b =>
                {
                    b.Navigation("Activites");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.ChambreOption", b =>
                {
                    b.Navigation("Chambres");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Client", b =>
                {
                    b.Navigation("AspNetUsers");

                    b.Navigation("Paiements");

                    b.Navigation("Voyages");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Fournisseur", b =>
                {
                    b.Navigation("Activites");

                    b.Navigation("Logements");

                    b.Navigation("Transports");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Invite", b =>
                {
                    b.Navigation("AspNetUsers");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.LocationLogement", b =>
                {
                    b.Navigation("Logements");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Logement", b =>
                {
                    b.Navigation("Chambres");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.LogementCategorie", b =>
                {
                    b.Navigation("Logements");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Pay", b =>
                {
                    b.Navigation("Activites");

                    b.Navigation("Logements");

                    b.Navigation("Transports");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.PrixLogement", b =>
                {
                    b.Navigation("Chambres");

                    b.Navigation("LocationLogements");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Transport", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.TransportCategorie", b =>
                {
                    b.Navigation("Transports");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.TransportOption", b =>
                {
                    b.Navigation("Transports");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.TransportPrix", b =>
                {
                    b.Navigation("Transports");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.VehiculeLocation", b =>
                {
                    b.Navigation("Transports");
                });

            modelBuilder.Entity("projet_csharp_travel_plan.Models.Voyage", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
