@model projet_csharp_travel_plan_frontend.DTO.TransportDTO

@{
    ViewData["Title"] = "Details";
    var selectedCountry = ViewData["SelectedCountry"] as string;
    var voyageId = ViewData["VoyageId"] as int? ?? 1; // Default to 1 if voyageId is null
    var categoriesAfficherOptions = new List<string> { "Aérien", "Maritime", "Terrestre - train" };
}

<h1>Details</h1>

<p class="description">Veuillez remplir les différentes options demandées</p>

<div class="container">
    <div class="card mb-4 shadow-sm">
        <div class="row no-gutters">
            <div class="col-md-4 d-flex flex-column justify-content-center">
                <img src="/img/transport_test.png" class="card-img" alt="Image du transport">
            </div>
            <div class="col-md-8 d-flex flex-column">
                <div class="card-body">
                    <h5 class="card-title">Nom de la compagnie</h5>
                    <p class="card-text">@Model.NomFournisseur</p>
                    @if (categoriesAfficherOptions.Contains(Model.CategorieTransportNom))
                    {
                        <p class="card-text">Numéro du siège</p>
                        <div class="form-check">
                            <input class="form-check-input option-checkbox" type="checkbox" id="bagageMain" name="BagageMain" value="true" data-price="@Model.PrixBagageMain" />
                            <label class="form-check-label" for="bagageMain">Bagage à main</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input option-checkbox" type="checkbox" id="bagageEnSoute" name="BagageEnSoute" value="true" data-price="@Model.PrixBagageEnSoute" />
                            <label class="form-check-label" for="bagageEnSoute">Bagage en soute</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input option-checkbox" type="checkbox" id="bagageLarge" name="BagageLarge" value="true" data-price="@Model.PrixBagageLarge" />
                            <label class="form-check-label" for="bagageLarge">Bagage large</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input option-checkbox" type="checkbox" id="speedyboarding" name="Speedyboarding" value="true" data-price="@Model.PrixSpeedyBoarding" />
                            <label class="form-check-label" for="speedyboarding">Speedyboarding</label>
                        </div>
                    }
                    <p class="card-text"><strong>Prix : </strong><span id="totalPrice">@Model.Prix</span> €</p>
                    <div class="form-group">
                        <label for="DateDebut">Date de début</label>
                        <input type="date" class="form-control" id="DateDebut" name="DateDebut" required />
                        <div class="invalid-feedback" data-name="DateDebut">Veuillez remplir ce champ.</div>
                    </div>
                    <div class="form-group">
                        <label for="DateFin">Date de fin</label>
                        <input type="date" class="form-control" id="DateFin" name="DateFin" required />
                        <div class="invalid-feedback" data-name="DateFin">Veuillez remplir ce champ.</div>
                    </div>
                </div>
                <div class="card-footer d-flex justify-content-between align-items-center">
                    <a asp-action="Index" asp-route-country="@selectedCountry" asp-route-voyageId="@voyageId" class="btn btn-danger ml-3">Retour à la liste</a>
                    <form id="transportForm" method="post" asp-action="ConfirmTransportSelection">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="IdTransport" value="@Model.IdTransport" />
                        <input type="hidden" name="voyageId" value="@voyageId" />
                        <button type="submit" class="btn btn-primary">Confirmer et passer à la réservation de logement</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const basePrice = parseFloat("@Model.Prix");
        const checkboxes = document.querySelectorAll('.option-checkbox');
        const totalPriceElement = document.getElementById('totalPrice');

        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', updatePrice);
        });

        function updatePrice() {
            let totalPrice = basePrice;

            checkboxes.forEach(checkbox => {
                if (checkbox.checked) {
                    totalPrice += parseFloat(checkbox.getAttribute('data-price')) || 0;
                }
            });

            totalPriceElement.textContent = totalPrice.toFixed(2);
        }

        // Validation du formulaire
        const form = document.getElementById('transportForm');
        form.addEventListener('submit', function (event) {
            // Réinitialiser les messages d'erreur
            document.querySelectorAll('.is-invalid').forEach(function (element) {
                element.classList.remove('is-invalid');
            });

            let valid = true;

            // Vérifier si les champs dates sont remplis
            const dateDebut = document.getElementById('DateDebut');
            const dateFin = document.getElementById('DateFin');

            if (!dateDebut.value) {
                dateDebut.classList.add('is-invalid');
                valid = false;
            }

            if (!dateFin.value) {
                dateFin.classList.add('is-invalid');
                valid = false;
            }

            if (!valid) {
                event.preventDefault();
            }
        });
    });
</script>

<style>
    .card {
        border-radius: 10px;
        border: none;
    }

    .card-img {
        border-radius: 10px 0 0 10px;
        object-fit: contain;
        height: 200px; /* Fixed height */
        width: 100%; /* Full width */
        border: 2px solid grey;
    }

    .card-title {
        font-weight: bold;
    }

    .card-subtitle {
        font-size: 14px;
        color: #6c757d;
    }

    .card-text {
        margin-bottom: 10px;
    }

    .card-footer {
        background-color: white;
        border-top: none;
        padding: 15px;
    }

    .btn {
        margin-bottom: 10px;
    }

    .fa-star.checked {
        color: orange;
    }

    .container .card:first-child {
        margin-top: 40px;
    }

    .btn-danger {
        background-color: #dc3545;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        .btn-danger:hover {
            background-color: #c82333;
        }

    .btn-primary {
        background-color: #337ab7;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        .btn-primary:hover {
            background-color: #23527c;
        }

    .mt-auto {
        margin-top: auto;
    }

    .ml-3 {
        margin-left: 1rem !important;
    }

    .is-invalid {
        border-color: #dc3545;
    }

    .invalid-feedback {
        display: none;
        color: #dc3545;
    }

    .is-invalid + .invalid-feedback {
        display: block;
    }
</style>
